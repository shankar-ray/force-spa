configure(allprojects) {
    apply plugin: 'idea'

    version = '1.0-SNAPSHOT'
    group = "net.davidbuccola.${rootProject.name}"

    // Symbolic versions for select dependencies. The version of most dependencies is specified inline with the
    // dependency declaration. However, for certain artifact groups that have multiple artifacts or that show up often
    // the version is specified symbolically here to simplify maintenance.

    ext {
        apacheHttpVersion = '4.2'
        commonsIoVersion = '2.4'
        commonsLangVersion = '3.1'
        gradleVersion = '1.8'
        guavaVersion = '15.0'
        hamcrestVersion = '1.3'
        jacksonVersion = '2.1.4'
        jerseyVersion = '1.17.1'
        junitVersion = '4.11'
        logbackVersion = '1.0.13'
        mockitoVersion = "1.9.5"
        slf4jVersion = '1.7.5'
        springVersion = '3.0.5.RELEASE'
    }

    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        flatDir { dirs "${rootProject.projectDir}/nonmavenlib" }
    }
}

configure(rootProject) {
    ext.gitHash = 'git log -1 --format=%H'.execute().text.trim()

    idea {
        project {
            languageLevel = '1.7'

            ipr {
                withXml { provider ->
                    provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'

                    //noinspection GroovyAssignabilityCheck
                    def gradleSettings = getFreshIprComponent(provider.node, 'GradleSettings')
                    gradleSettings.appendNode('option', [name: 'gradleHome', value: gradle.gradleHomeDir.absolutePath])

                    //noinspection GroovyAssignabilityCheck
                    def javacSettings = getFreshIprComponent(provider.node, 'JavacSettings')
                    javacSettings.appendNode('option', [name: 'MAXIMUM_HEAP_SIZE', value: "256"])

                    //noinspection GroovyAssignabilityCheck
                    def checkstyleSettings = getFreshIprComponent(provider.node, 'CheckStyle-IDEA')
                    def mapNode = checkstyleSettings.appendNode('option', [name: 'configuration']).appendNode('map')
                    mapNode.appendNode('entry', [key: 'active-configuration', value: 'LOCAL_FILE:$PROJECT_DIR$/config/src/main/resources/checkstyle.xml:'])
                    mapNode.appendNode('entry', [key: 'check-nonjava-files', value: 'false'])
                    mapNode.appendNode('entry', [key: 'check-test-classes', value: 'false'])
                    mapNode.appendNode('entry', [key: 'location-0', value: 'CLASSPATH:/sun_checks.xml:The default CheckStyle rules'])
                    mapNode.appendNode('entry', [key: 'location-1', value: 'LOCAL_FILE:$PROJECT_DIR$/config/src/main/resources/checkstyle.xml:'])
                    mapNode.appendNode('entry', [key: 'suppress-errors', value: 'false'])
                    mapNode.appendNode('entry', [key: 'thirdparty-classpath', value: ''])
                }
            }
        }
    }
}

configure(subprojects - project(":config") - project(":force-spa-testschema")) {
    apply plugin: 'java'
    apply plugin: 'osgi'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'signing'
    apply plugin: 'findbugs'
    apply plugin: 'checkstyle'

    ext.gitHash = rootProject.gitHash  // So we don't execute git command multiple times

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    idea {
        module {
            inheritOutputDirs = false
            outputDir = file("${project.buildDir}/classes/main")
            testOutputDir = file("${project.buildDir}/classes/test")
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allJava.srcDirs
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    tasks.withType(Compile) {
        options.debug = true
        options.encoding = 'UTF-8'
    }

    tasks.withType(Jar) {
        manifest {
            attributes('Source-Revision': gitHash)
        }
    }

    tasks.withType(Test) {
        maxParallelForks = Runtime.runtime.availableProcessors() / 2
        jvmArgs '-Xmx512m', '-XX:MaxPermSize=128m'
    }

    checkstyle {
        sourceSets = [sourceSets.main]
        configFile = file("${project(':config').projectDir}/src/main/resources/checkstyle.xml")
        toolVersion = 5.6
    }

    findbugs {
        sourceSets = [sourceSets.main]
        excludeFilter = file("${project(':config').projectDir}/src/main/resources/findbugs-exclude.xml")
    }

    signing {
        required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask('uploadArchives') }
        sign configurations.archives
    }

    install {
        repositories {
            mavenInstaller {
                pom.whenConfigured { generatedPom -> customizePom(generatedPom, project) }
            }
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                pom.whenConfigured { generatedPom ->
                    customizePom(generatedPom, project)
                }
                beforeDeployment {
                    deployment -> signing.signPom(deployment)
                }
                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                    if (project.hasProperty('sonatypeStagingUsername')) {
                        authentication(userName: sonatypeStagingUsername, password: sonatypeStagingPassword)
                    }
                }
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    if (project.hasProperty('sonatypeStagingUsername')) {
                        authentication(userName: sonatypeStagingUsername, password: sonatypeStagingPassword)
                    }
                }
            }
        }
    }

    if (file("src/integrationTest").exists()) {
        sourceSets {
            integrationTest {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
            }
        }

        configurations {
            integrationTestCompile.extendsFrom testCompile
            integrationTestRuntime.extendsFrom testRuntime
        }

        task integrationTest(type: Test) {
            classpath = sourceSets.integrationTest.runtimeClasspath
            testClassesDir = sourceSets.integrationTest.output.classesDir
            reports.junitXml.destination = file("${project.testResultsDir}/$name")
        }

        idea {
            module {
                testSourceDirs += sourceSets.integrationTest.java.srcDirs + sourceSets.integrationTest.resources.srcDirs
                scopes.TEST.plus.add(configurations.integrationTestCompile)
                scopes.TEST.plus.add(configurations.integrationTestRuntime)
            }
        }

        eclipse {
            classpath {
                plusConfigurations.add(configurations.integrationTestCompile)
                plusConfigurations.add(configurations.integrationTestRuntime)
            }
        }
    }

    // Support for 'provided' dependencies in generated poms
    ext.providedDependencies = []
    ext.provided = { providedDependencies << it }
}

/**
 * Customize the auto-generated pom with additional items necessary for maven central publication.
 */
@SuppressWarnings("GroovyAssignabilityCheck")
def customizePom(pom, gradleProject) {
    pom.project {
        name = gradleProject.name
        description = gradleProject.description
        url = "https://github.com/davidbuccola/${rootProject.name}"
        packaging 'jar'
        organization {
            name = 'David Buccola'
            url = 'https://github.com/davidbuccola'
        }
        developers {
            developer {
                id = 'davidbuccola'
                name = 'David Buccola'
                email = 'david.buccola@gmail.com'
            }
        }
        scm {
            url = "https://github.com/davidbuccola/${rootProject.name}"
            connection = "scm:git:git://github.com/davidbuccola/${rootProject.name}.git"
            developerConnection = "scm:git:git://github.com/davidbuccola/${rootProject.name}.git"
        }
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        // Respect 'provided' dependencies
        gradleProject.providedDependencies.each { dep ->
            pom.dependencies.find { it.artifactId == dep.name }?.scope = 'provided'
        }
    }
}

/**
 * Generates a new gradle wrapper. You'll want to do this if you change gradle version or if your jvm options change
 * below.
 */
task wrapper(type: Wrapper) {
    description = 'Generates gradlew[.bat] scripts'

    gradleVersion = project.gradleVersion

    // Establish the default memory settings for the gradle wrappers. These settings can still be overridden in the
    // environment with GRADLE_OPTS or JAVA_OPTS if desired. Note that you should avoid use of -Xms here because it has
    // a tendency to not play well with other settings in the environment if they exist.
    doLast() {
        def defaultJvmOpts = "-XX:MaxPermSize=128m -Xmx512m"
        File wrapperFile = file('gradlew')
        wrapperFile.text = wrapperFile.text.replace("DEFAULT_JVM_OPTS=\"\"", "DEFAULT_JVM_OPTS=\"$defaultJvmOpts\"")
        File wrapperBatFile = file('gradlew.bat')
        wrapperBatFile.text = wrapperBatFile.text.replace("set DEFAULT_JVM_OPTS=", "set DEFAULT_JVM_OPTS=$defaultJvmOpts")
    }
}

/**
 * Returns a brand new Ipr component node with no children. If an existing component node is found it is removed along
 * with all of its children and a fresh one is created.
 */
def getFreshIprComponent(Node projectNode, String componentName) {
    Node existingComponent = (Node) projectNode.component.find { it.@name == componentName }
    if (existingComponent) {
        projectNode.remove(existingComponent)
    }
    return projectNode.appendNode('component', [name: componentName])
}

